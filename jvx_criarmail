#!/bin/bash
# ------------------------------------------------------------------------------
# Script: jvx_criarmail
# Autor: Percio Andrade <percio@joinvix.com.br>
#
# GitHub: 
# Changelog: 
#
# Solicitação em: sem solicitação - alta demanda chat
# Projeto: https://app.clickup.com/90131580128/v/dc/2ky45h70-673/2ky45h70-6333
#
# Versão: 1.0.0
# Data de criação: 31/07/2025
# Última modificação: 31/07/2025
# ------------------------------------------------------------------------------
#
# Descrição:
#    Script para automatizar a alteração de senhas de email em servidores WHM/cPanel.
#    - Utiliza uapi do cPanel/WHM para operações.
# ------------------------------------------------------------------------------

if [[ -z "$1" ]]; then
    echo "[!] - Modo de uso: jvx_criarmail email@dominio.com.br"
    exit 1
fi

EMAIL=$1

function verificaOpenssl(){ 
	# Valida o openssl
    if ! command -v openssl >/dev/null 2>&1; then
        echo "[!] - O script precisa do OpenSSL para funcionar"
        exit 1
    fi
}

SENHA=$(openssl rand -base64 16)

function verificaEmail(){
	# Valida a variavel
    if [[ -z "${EMAIL}" ]]; then
        echo "[!] - O email não pode ficar em branco"
        exit 1
    fi

	# Valida o email
	if [[ ! ${EMAIL} =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
		echo "[!] - O email ${EMAIL} é inválido"
		exit 1
	fi
}

function verificaSenha(){
    if [[ -z "${SENHA}" ]]; then
        echo "[!] - Houve um problema na geração da senha"
        exit 1
    fi
}

# Chama as funções
verificaOpenssl
verificaEmail
verificaSenha

# Obtem o domínio via $EMAIL após o @
DOMINIO=${EMAIL#*@}

# Verifica a variavel $DOMINIO
if [[ -z "${DOMINIO}" ]]; then
    echo "[!] - Houve um problema ao obter o domínio"
    exit 1
fi

# Verifica se o domínio resolve
if ! getent hosts "${DOMINIO}" >/dev/null; then
    echo "[!] - Domínio ${DOMINIO} não resolve"
fi

# Verifica se o domínio esta cadastrado
if grep -iE "^${DOMINIO}:" /etc/trueuserdomains >/dev/null; then
    echo "Domínio ${DOMINIO} está cadastrado no servidor"
else
    echo "[!] Domínio ${DOMINIO} NÃO está cadastrado no servidor"
    exit 1
fi

# Obtem o usuário do domínio
USUARIO=$(/scripts/whoowns "${DOMINIO}")
if [[ -z "${USUARIO}" ]]; then
    echo "[!] - Houve um problema ao obter o usuário do domínio."
    exit 1
fi

# checa existência do email (usando list_pops, sem parsing frágil)
if uapi --user="${USUARIO}" Email list_pops domain="${DOMINIO}" | grep -qF "${EMAIL}"; then
    echo "[!] - O email ${EMAIL} já existe no servidor."
    exit 1
fi

# Executa a criação de conta de email usando uapi
RESPONSE=$(uapi --user="${USUARIO}" Email add_pop email="${EMAIL}" domain="${DOMINIO}" password="${SENHA}" quota=250 --output=json)
status=$(echo "$RESPONSE" | grep -oP '"status":\s*\K\d+')
if [[ -z "$status" || "$status" -ne 1 ]]; then
    echo "[!] - Erro ao criar conta de email senha: ${RESPONSE}"
    exit 1
fi

# Mensagem ao cliente
echo -e "Prezado cliente,

A conta de email ${EMAIL} foi criada com sucesso, segue abaixo os dados:

Email: ${EMAIL}
Senha: ${SENHA}
"

# Cria o webhook para saida de integração
